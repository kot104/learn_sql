mysql> CREATE USER 'ohdear_ci'@'localhost' IDENTIFIED BY 'ohdear_secret';
Query OK, 0 rows affected (0.11 sec)

mysql> GRANT ALL ON ohdear_ci.* TO 'ohdear_ci'@'localhost';
Query OK, 0 rows affected (0.15 sec)

------------------------===================================================================================------------------------
-- долгое и полное написание
CONSTRAINT nationality_country_fk_1 FOREIGN KEY (product_id) REFERENCES product(product_id),
--краткое сокращение, одновременно создаем и поле и внешний ключ
product_id int4 REFERENCES product(product_id)
--еще более краткое написание
product_id int4 REFERENCES product,


CREATE table product (
product_id int4 PRIMARY KEY,
name VARCHAR(50) not NULL
);


CREATE table orders (
order_id int PRIMARY KEY not NULL,
product_id int4 REFERENCES product(product_id),
order_name VARCHAR(30)
);

-- составной первичный ключ 
PRIMARY KEY (product_id, order_id))

CREATE TABLE order_items (
    product_id integer REFERENCES product,
    order_id integer REFERENCES orders,
    quantity integer,
    PRIMARY KEY (product_id, order_id));

------------------------===================================================================================------------------------
--uuid и тип данных  inet

--включаем расширение
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
--присваиваем uuid для id записи id_launch uuid default gen_random_uuid() primary key,
create table launch (
id_launch uuid default gen_random_uuid() primary key,
launch_name varchar(30),
launch_ip4 inet 
);

select * from launch;

insert into launch (launch_name, launch_ip4)
values
('edvord', '172.16.55.2/28');

------------------------==============================окошки=====================================================------------------------
порядок выполнения запроса
from
on 
join 
where 
group by 
having 
over --оконная функция
select 
order by

over () - по всем данным глобально без какой либо последовательности
over (partition by) по каждой группе в отдельности без какой либо последовательности
over (order by) по всем данным глобально в определенной последовательности
over (partition by order by) по каждой группе в отдельности в определенной последовательности

НАКОПИТЕЛЬНЫЙ ИТОГ ФОРМИРУЕТСЯ ТОЛЬКО ЧЕРЕЗ ORDER by
select *, row_number() over (partition by customer_id order by rental_date)
	from rental
--оконная функция row_number () over()

select customer_id, payment_date::date, amount, 
	sum(amount) over (partition by customer_id order by payment_date::date),
	sum(amount) over (partition by customer_id)
from payment 

------------------------==============================cte=====================================================------------------------
--Вычислите медиану стоимости перелетов, медиану стоимости бронирования и отношение медианы бронирования к медиане стоимости перелетов, результат округлите до сотых. 
with cte_1 as (
select percentile_cont(0.5) within group (order by b.total_amount) as  "медиана_стоимости_бронирования"
	from bookings b
),
cte_2 as(
select percentile_cont(0.5) within group (order by tf.amount) as  "медиана_стоимости_перелетов"
	from ticket_flights tf)
select 	"медиана_стоимости_бронирования", "медиана_стоимости_перелетов", round(("медиана_стоимости_бронирования"/"медиана_стоимости_перелетов")::numeric,2)
from cte_1, cte_2


------------------------==============================lead=lag=====================================================------------------------
--lead  - следующие
--lag - предыдущие
--текущий платеж пользователя большей меньше чем предыдущий
select customer_id, payment_date, 
	lag(amount) over (partition by customer_id order by payment_date),
	amount,
	lead(amount) over (partition by customer_id order by payment_date)
from payment 

select customer_id, payment_date, 
	lag(amount, 3) over (partition by customer_id order by payment_date),
	amount,
	lead(amount, 3) over (partition by customer_id order by payment_date)
from payment 

select customer_id, payment_date, 
	lag(amount, 3, 0.) over (partition by customer_id order by payment_date),
	amount,
	lead(amount, 3, 0.) over (partition by customer_id order by payment_date)
from payment 

------------------------==============================работа с рангами и порядковыми номерами=====================================================------------------------
row_number - сквозная нумерация
dense_rank - получение общего ранга по общему знаменателю и каждый последующий ранг увеличивается на +1
rank - получение общего ранга по общему знаменателю и каждый последующий ранг увеличивается на значение предыдущего ранга + кол-во записей
в предыдущем ранге

select customer_id, payment_date::date,
	row_number() over (partition by customer_id order by payment_date::date), 
	dense_rank() over (partition by customer_id order by payment_date::date), 
	rank() over (partition by customer_id order by payment_date::date)
from payment 
