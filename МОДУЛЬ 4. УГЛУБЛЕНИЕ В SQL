--=============== МОДУЛЬ 4. УГЛУБЛЕНИЕ В SQL =======================================
--= ПОМНИТЕ, ЧТО НЕОБХОДИМО УСТАНОВИТЬ ВЕРНОЕ СОЕДИНЕНИЕ И ВЫБРАТЬ СХЕМУ PUBLIC===========
SET search_path TO public;

--======== ОСНОВНАЯ ЧАСТЬ ==============

--ЗАДАНИЕ №1
--База данных: если подключение к облачной базе, то создаёте новую схему с префиксом в --виде фамилии, название должно быть на латинице в нижнем регистре и таблицы создаете --в этой новой схеме, если подключение к локальному серверу, то создаёте новую схему и --в ней создаёте таблицы.

--Спроектируйте базу данных, содержащую три справочника:
--· язык (английский, французский и т. п.);
--· народность (славяне, англосаксы и т. п.);
--· страны (Россия, Германия и т. п.).
--Две таблицы со связями: язык-народность и народность-страна, отношения многие ко многим. Пример таблицы со связями — film_actor.
--Требования к таблицам-справочникам:
--· наличие ограничений первичных ключей.
--· идентификатору сущности должен присваиваться автоинкрементом;
--· наименования сущностей не должны содержать null-значения, не должны допускаться --дубликаты в названиях сущностей.
--Требования к таблицам со связями:
--· наличие ограничений первичных и внешних ключей.

--В качестве ответа на задание пришлите запросы создания таблиц и запросы по --добавлению в каждую таблицу по 5 строк с данными.
 
--СОЗДАНИЕ ТАБЛИЦЫ ЯЗЫКИ

CREATE TABLE language (
language_id serial PRIMARY key,
reduction VARCHAR (50) UNIQUE NOT null,
title VARCHAR (50) UNIQUE NOT NULL
);
--ВНЕСЕНИЕ ДАННЫХ В ТАБЛИЦУ ЯЗЫКИ

INSERT INTO language ( language_id, reduction, title)
VALUES 
('eng', 'English'),
('ru', 'Russian'),
('fra', 'French'),
('gle', 'Irish'),
('hye', 'Armenian');


--СОЗДАНИЕ ТАБЛИЦЫ НАРОДНОСТИ

CREATE TABLE nationality (
nationality_id serial PRIMARY key,
title VARCHAR (50) UNIQUE NOT NULL
);


--ВНЕСЕНИЕ ДАННЫХ В ТАБЛИЦУ НАРОДНОСТИ

INSERT INTO nationality (title)
VALUES
('Anglo-Saxons'),
('Slavs'),
('Germans'),
('Icelanders'),
('Norwegians');


--СОЗДАНИЕ ТАБЛИЦЫ СТРАНЫ

CREATE TABLE country (
country_id serial PRIMARY KEY,
title VARCHAR (50) UNIQUE NOT NULL,
capital VARCHAR (50) UNIQUE NOT NULL
);

--ВНЕСЕНИЕ ДАННЫХ В ТАБЛИЦУ СТРАНЫ

INSERT INTO country (title, capital)
VALUES
('USA', 'Washington'),
('Russian', 'Moscow'),
('French', 'Saint-Denis'),
('Irish', 'Dublin'),
('Armenian', 'Yerevan');

--СОЗДАНИЕ ПЕРВОЙ ТАБЛИЦЫ СО СВЯЗЯМИ
--язык-народность
CREATE TABLE language_nationality (
language_id INT not null, 
nationality_id int not null,
CONSTRAINT language_nationality_fk FOREIGN KEY (language_id) REFERENCES modul4."language"(language_id),
CONSTRAINT language_nationality_fk_1 FOREIGN KEY (nationality_id) REFERENCES modul4.nationality(nationality_id),
CONSTRAINT language_nationality_pk PRIMARY KEY (language_id,nationality_id);
);

--ВНЕСЕНИЕ ДАННЫХ В ТАБЛИЦУ СО СВЯЗЯМИ

INSERT INTO language_nationality (language_id, nationality_id)
VALUES
(1, 1),
(2, 2),
(1, 3),
(5, 3),
(4, 5);

--СОЗДАНИЕ ВТОРОЙ ТАБЛИЦЫ СО СВЯЗЯМИ
--народность-страна

CREATE TABLE  nationality_country (
nationality_id int not null,
country_id int not null,
CONSTRAINT nationality_country_fk FOREIGN KEY (nationality_id) REFERENCES modul4."nationality"(nationality_id),
CONSTRAINT nationality_country_fk_1 FOREIGN KEY (country_id) REFERENCES modul4.country(country_id),
CONSTRAINT nationality_country_pk PRIMARY KEY (country_id,nationality_id)
);
--ВНЕСЕНИЕ ДАННЫХ В ТАБЛИЦУ СО СВЯЗЯМИ

INSERT INTO nationality_country (nationality_id, country_id)
VALUES
(1, 1),
(2, 2),
(1, 3),
(4, 4),
(1, 5);

--======== ДОПОЛНИТЕЛЬНАЯ ЧАСТЬ ==============


--ЗАДАНИЕ №1 
--Создайте новую таблицу film_new со следующими полями:
--·   	film_name - название фильма - тип данных varchar(255) и ограничение not null
--·   	film_year - год выпуска фильма - тип данных integer, условие, что значение должно быть больше 0
--·   	film_rental_rate - стоимость аренды фильма - тип данных numeric(4,2), значение по умолчанию 0.99
--·   	film_duration - длительность фильма в минутах - тип данных integer, ограничение not null и условие, что значение должно быть больше 0
--Если работаете в облачной базе, то перед названием таблицы задайте наименование вашей схемы.

CREATE TABLE film_new (
film_name varchar(255) NOT NULL,
film_year INTEGER CHECK(film_year > 0),
film_rental_rate numeric(4,2) not null  DEFAULT 0.99,
film_duration integer NOT NULL CHECK(film_duration > 0)
);

--ЗАДАНИЕ №2 
--Заполните таблицу film_new данными с помощью SQL-запроса, где колонкам соответствуют массивы данных:
--·       film_name - array['The Shawshank Redemption', 'The Green Mile', 'Back to the Future', 'Forrest Gump', 'Schindlers List']
--·       film_year - array[1994, 1999, 1985, 1994, 1993]
--·       film_rental_rate - array[2.99, 0.99, 1.99, 2.99, 3.99]
--·   	  film_duration - array[142, 189, 116, 142, 195]

INSERT INTO film_new (film_name, film_year, film_rental_rate, film_duration)
select 
unnest (array['The Shawshank Redemption', 'The Green Mile', 'Back to the Future', 'Forrest Gump', 'Schindlers List']),
unnest (array[1994, 1999, 1985, 1994, 1993]),
unnest (array[2.99, 0.99, 1.99, 2.99, 3.99]),
unnest (array[142, 189, 116, 142, 195]);

--ЗАДАНИЕ №3
--Обновите стоимость аренды фильмов в таблице film_new с учетом информации, 
--что стоимость аренды всех фильмов поднялась на 1.41

UPDATE film_new
set film_rental_rate = film_rental_rate * 1.41;

-- проверка
select film_rental_rate from film_new

--4.22
--1.40
--2.81
--4.22
--5.63

--ЗАДАНИЕ №4
--Фильм с названием "Back to the Future" был снят с аренды, 
--удалите строку с этим фильмом из таблицы film_new
DELETE from film_new 
where film_name = 'Back to the Future';



--ЗАДАНИЕ №5
--Добавьте в таблицу film_new запись о любом другом новом фильме

INSERT INTO film_new (film_name, film_year, film_rental_rate, film_duration)
VALUES
('Cobra Throw', 2009, 1.53, 113)

--ЗАДАНИЕ №6
--Напишите SQL-запрос, который выведет все колонки из таблицы film_new, 
--а также новую вычисляемую колонку "длительность фильма в часах", округлённую до десятых

SELECT ROUND((film_duration / 60.0), 1) as film_duration_hour, * 
from film_new;

--ЗАДАНИЕ №7 
--Удалите таблицу film_new
DROP TABLE film_new;
